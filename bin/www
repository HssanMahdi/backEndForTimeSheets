#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("timesheet-backend:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
const io = require("socket.io")(server, {
  // pingTimeout: 60000,
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"],
  },
});
var socktable = [];
io.on("connection", (socket) => {
  let oneSocket = {
    idSocket: socket.id,
    _id: "",
    userName: "",
  };
  socktable.push(oneSocket);
  socket.on("persistIdEmployee", (data) => {
    for (let i = 0; i < socktable.length; i++) {
      if (socktable[i].idSocket == data.me) {
        socktable[i].userName = data.name;
        socktable[i]._id = data.id;
      }
    }
  });
  //construction room pour user connectÃ©
  socket.on("setup", (userData) => {
    socket.join(userData._id);  
    socket.emit("connected");
  });
  //autre user va participer room
  socket.on("join chat", (room) => {
    socket.join(room);
    // console.log("User Joined Room: " + room);
  });
  socket.on("groupChatCreation", (selectedUsers) => {
    for (let i = 0; i < selectedUsers.length; i++) {
      for (let j = 0; j < socktable.length; j++) {
        if (socktable[j]._id == selectedUsers[i]._id) {
          socket.broadcast.to(socktable[j].idSocket).emit("refetchChats");
        }
      }
    }
  });
  socket.on("typing", (room) => {
    socket.broadcast.in(room).emit("typing");
    console.log("1");
  });
  socket.on("stop typing", (room) => socket.in(room).emit("stop typing"));

  socket.on("new message", (newMessageRecieved) => {
    var chat = newMessageRecieved.chat;

    if (!chat.employees) return console.log("chat.users not defined");

    chat.employees.forEach((user) => {
      if (user._id == newMessageRecieved.sender._id) return;

      socket.in(user._id).emit("message recieved", newMessageRecieved);
    });
  });

  //Video Chat
  socket.on("sendMe",(data)=>{
    var me;
    for (let i = 0; i < socktable.length; i++) {
      if (socktable[i]._id == data.me) {
        me = socktable[i].idSocket;
      }
    }
    socket.emit("me", me);
  });
  // socket.emit("me", socket.id);
  socket.on("disconnect", () => {
    socket.broadcast.emit("callEnded");
  });

  socket.on("callUser", (data) => {
    let caller;
    let toCall;
    for (let i = 0; i < socktable.length; i++) {
      if (socktable[i]._id == data.from) {
        caller = socktable[i].idSocket;
      }
      if (socktable[i]._id == data.userToCall) {
        toCall = socktable[i].idSocket;
      }
    }
    // console.log("socktable : ",socktable)
    io.to(toCall).emit("callUser", {
      signal: data.signalData,
      from: caller,
      name: data.name,
    });
    // console.log("caller : ", caller);
    // console.log("toCall : ", toCall);
  });

  socket.on("answerCall", (data) => {
    io.to(data.to).emit("callAccepted", data.signal);
  });
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

process.on('uncaughtException', function (err) {
  console.error(err);
  console.log("Node NOT Exiting...");
});
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
